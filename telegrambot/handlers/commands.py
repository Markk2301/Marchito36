import sqlite3
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


funny_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üî§ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="english_translate"),
     InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="russian_translate")]
])

def init_db():
    conn = sqlite3.connect('vocabulary.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS words (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        english TEXT UNIQUE,
        russian TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_words (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        word_id INTEGER,
        FOREIGN KEY(word_id) REFERENCES words(id),
        UNIQUE(user_id, word_id)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_progress (
        user_id INTEGER PRIMARY KEY,
        added INTEGER DEFAULT 0,
        skipped INTEGER DEFAULT 0,
        correct INTEGER DEFAULT 0,
        wrong INTEGER DEFAULT 0
    )
    ''')

    english_words = {
        "actually": "–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ",
        "annoying": "—Ä–∞–∑–¥—Ä–∞–∂–∞—é—â–∏–π",
        "awkward": "–Ω–µ–ª–æ–≤–∫–∏–π",
        "bother": "–±–µ—Å–ø–æ–∫–æ–∏—Ç—å",
        "common": "—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π",
        "concern": "–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ",
        "confused": "—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω—ã–π",
        "convenient": "—É–¥–æ–±–Ω—ã–π",
        "crowded": "–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π",
        "delicious": "–≤–∫—É—Å–Ω—ã–π",
        "disappointed": "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π",
        "embarrassed": "—Å–º—É—â—ë–Ω–Ω—ã–π",
        "emergency": "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
        "entire": "—Ü–µ–ª—ã–π",
        "especially": "–æ—Å–æ–±–µ–Ω–Ω–æ",
        "expect": "–æ–∂–∏–¥–∞—Ç—å",
        "familiar": "–∑–Ω–∞–∫–æ–º—ã–π",
        "frustrated": "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π",
        "guilty": "–≤–∏–Ω–æ–≤–∞—Ç—ã–π",
        "huge": "–æ–≥—Ä–æ–º–Ω—ã–π",
        "ignore": "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        "immediately": "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
        "impressive": "–≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–π",
        "incredible": "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π",
        "informal": "–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π",
        "instead": "–≤–º–µ—Å—Ç–æ",
        "intend": "–Ω–∞–º–µ—Ä–µ–≤–∞—Ç—å—Å—è",
        "issue": "–ø—Ä–æ–±–ª–µ–º–∞",
        "jealous": "—Ä–µ–≤–Ω–∏–≤—ã–π",
        "likely": "–≤–µ—Ä–æ—è—Ç–Ω–æ",
        "mention": "—É–ø–æ–º–∏–Ω–∞—Ç—å",
        "messy": "–≥—Ä—è–∑–Ω—ã–π/–Ω–µ–∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π",
        "necessary": "–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π",
        "nervous": "–Ω–µ—Ä–≤–Ω—ã–π",
        "obvious": "–æ—á–µ–≤–∏–¥–Ω—ã–π",
        "ordinary": "–æ–±—ã—á–Ω—ã–π",
        "particular": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π",
        "patient": "—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π",
        "perhaps": "–≤–æ–∑–º–æ–∂–Ω–æ",
        "polite": "–≤–µ–∂–ª–∏–≤—ã–π",
        "popular": "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π",
        "possible": "–≤–æ–∑–º–æ–∂–Ω—ã–π",
        "prepare": "–≥–æ—Ç–æ–≤–∏—Ç—å(—Å—è)",
        "probably": "–Ω–∞–≤–µ—Ä–Ω–æ–µ",
        "promise": "–æ–±–µ—â–∞–Ω–∏–µ",
        "proud": "–≥–æ—Ä–¥—ã–π",
        "punctual": "–ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–π",
        "purpose": "—Ü–µ–ª—å",
        "recently": "–Ω–µ–¥–∞–≤–Ω–æ",
        "refuse": "–æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è",
        "regret": "—Å–æ–∂–∞–ª–µ—Ç—å",
        "relaxed": "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π",
        "remind": "–Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å",
        "responsible": "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
        "rude": "–≥—Ä—É–±—ã–π",
        "satisfied": "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω—ã–π",
        "serious": "—Å–µ—Ä—å—ë–∑–Ω—ã–π",
        "several": "–Ω–µ—Å–∫–æ–ª—å–∫–æ",
        "slightly": "—Å–ª–µ–≥–∫–∞",
        "social": "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π",
        "suddenly": "–≤–¥—Ä—É–≥",
        "suitable": "–ø–æ–¥—Ö–æ–¥—è—â–∏–π",
        "support": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å",
        "surprised": "—É–¥–∏–≤–ª—ë–Ω–Ω—ã–π",
        "terrible": "—É–∂–∞—Å–Ω—ã–π",
        "tired": "—É—Å—Ç–∞–≤—à–∏–π",
        "typical": "—Ç–∏–ø–∏—á–Ω—ã–π",
        "uncomfortable": "–Ω–µ—É–¥–æ–±–Ω—ã–π",
        "unusual": "–Ω–µ–æ–±—ã—á–Ω—ã–π",
        "useful": "–ø–æ–ª–µ–∑–Ω—ã–π",
        "valuable": "—Ü–µ–Ω–Ω—ã–π",
        "various": "—Ä–∞–∑–ª–∏—á–Ω—ã–π",
        "waste": "—Ç—Ä–∞—Ç–∏—Ç—å –≤–ø—É—Å—Ç—É—é",
        "whole": "–≤–µ—Å—å",
        "worried": "–æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–Ω—ã–π",
        "worth": "—Å—Ç–æ—è—â–∏–π",
        "anxious": "—Ç—Ä–µ–≤–æ–∂–Ω—ã–π",
        "brave": "—Ö—Ä–∞–±—Ä—ã–π",
        "calm": "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "clever": "—É–º–Ω—ã–π",
        "doubt": "—Å–æ–º–Ω–µ–Ω–∏–µ",
        "eager": "–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π",
        "faith": "–≤–µ—Ä–∞",
        "generous": "—â–µ–¥—Ä—ã–π",
        "honest": "—á–µ—Å—Ç–Ω—ã–π",
        "humble": "—Å–∫—Ä–æ–º–Ω—ã–π",
        "ideal": "–∏–¥–µ–∞–ª—å–Ω—ã–π",
        "kind": "–¥–æ–±—Ä—ã–π",
        "loyal": "–≤–µ—Ä–Ω—ã–π",
        "mature": "–∑—Ä–µ–ª—ã–π",
        "modest": "—Å–∫—Ä–æ–º–Ω—ã–π",
        "optimistic": "–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π",
        "passionate": "—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π",
        "reliable": "–Ω–∞–¥—ë–∂–Ω—ã–π",
        "sincere": "–∏—Å–∫—Ä–µ–Ω–Ω–∏–π",
        "thoughtful": "–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π",
        "wise": "–º—É–¥—Ä—ã–π",
        "agree": "—Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è",
        "apologize": "–∏–∑–≤–∏–Ω—è—Ç—å—Å—è",
        "argue": "—Å–ø–æ—Ä–∏—Ç—å",
        "arrive": "–ø—Ä–∏–±—ã–≤–∞—Ç—å",
        "believe": "–≤–µ—Ä–∏—Ç—å",
        "borrow": "–±—Ä–∞—Ç—å –≤–∑–∞–π–º—ã",
        "celebrate": "–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å",
        "complain": "–∂–∞–ª–æ–≤–∞—Ç—å—Å—è",
        "discuss": "–æ–±—Å—É–∂–¥–∞—Ç—å",
        "explain": "–æ–±—ä—è—Å–Ω—è—Ç—å",
        "forgive": "–ø—Ä–æ—â–∞—Ç—å",
        "improve": "—É–ª—É—á—à–∞—Ç—å",
        "invite": "–ø—Ä–∏–≥–ª–∞—à–∞—Ç—å",
        "laugh": "—Å–º–µ—è—Ç—å—Å—è",
        "manage": "—É–ø—Ä–∞–≤–ª—è—Ç—å",
        "nod": "–∫–∏–≤–∞—Ç—å",
        "offer": "–ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å",
        "pretend": "–ø—Ä–∏—Ç–≤–æ—Ä—è—Ç—å—Å—è",
        "react": "—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å",
        "smile": "—É–ª—ã–±–∞—Ç—å—Å—è",
        "trust": "–¥–æ–≤–µ—Ä—è—Ç—å",
        "wonder": "–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è",
        "yell": "–∫—Ä–∏—á–∞—Ç—å",
        "achieve": "–¥–æ—Å—Ç–∏–≥–∞—Ç—å",
        "admire": "–≤–æ—Å—Ö–∏—â–∞—Ç—å—Å—è",
        "advise": "—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å",
        "affect": "–≤–ª–∏—è—Ç—å",
        "allow": "—Ä–∞–∑—Ä–µ—à–∞—Ç—å",
        "amaze": "–ø–æ—Ä–∞–∂–∞—Ç—å",
        "amuse": "—Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å",
        "analyze": "–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
        "announce": "–æ–±—ä—è–≤–ª—è—Ç—å",
        "appear": "–ø–æ—è–≤–ª—è—Ç—å—Å—è",
        "appreciate": "—Ü–µ–Ω–∏—Ç—å",
        "approve": "–æ–¥–æ–±—Ä—è—Ç—å",
        "arrange": "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å",
        "attack": "–∞—Ç–∞–∫–æ–≤–∞—Ç—å",
        "attempt": "–ø—ã—Ç–∞—Ç—å—Å—è",
        "avoid": "–∏–∑–±–µ–≥–∞—Ç—å",
        "bake": "–ø–µ—á—å",
        "bathe": "–∫—É–ø–∞—Ç—å—Å—è",
        "beg": "—É–º–æ–ª—è—Ç—å",
        "behave": "–≤–µ—Å—Ç–∏ —Å–µ–±—è",
        "blame": "–≤–∏–Ω–∏—Ç—å",
        "breathe": "–¥—ã—à–∞—Ç—å",
        "bury": "—Ö–æ—Ä–æ–Ω–∏—Ç—å",
        "calculate": "–≤—ã—á–∏—Å–ª—è—Ç—å",
        "challenge": "–≤—ã–∑–æ–≤",
        "cheer": "–ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—Ç—å",
        "chew": "–∂–µ–≤–∞—Ç—å",
        "climb": "–≤–∑–±–∏—Ä–∞—Ç—å—Å—è",
        "collect": "—Å–æ–±–∏—Ä–∞—Ç—å",
        "compare": "—Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å",
        "compete": "—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è",
        "complain": "–∂–∞–ª–æ–≤–∞—Ç—å—Å—è",
        "complete": "–∑–∞–≤–µ—Ä—à–∞—Ç—å",
        "concentrate": "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        "confess": "–ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å—Å—è",
        "connect": "—Å–æ–µ–¥–∏–Ω—è—Ç—å",
        "consider": "—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å",
        "contain": "—Å–æ–¥–µ—Ä–∂–∞—Ç—å",
        "continue": "–ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å",
        "control": "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å",
        "correct": "–∏—Å–ø—Ä–∞–≤–ª—è—Ç—å",
        "create": "—Å–æ–∑–¥–∞–≤–∞—Ç—å",
        "criticize": "–∫—Ä–∏—Ç–∏–∫–æ–≤–∞—Ç—å",
        "dance": "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å",
        "decide": "—Ä–µ—à–∞—Ç—å",
        "decorate": "—É–∫—Ä–∞—à–∞—Ç—å",
        "delay": "–∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å",
        "deliver": "–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å",
        "demand": "—Ç—Ä–µ–±–æ–≤–∞—Ç—å",
        "depend": "–∑–∞–≤–∏—Å–µ—Ç—å",
        "describe": "–æ–ø–∏—Å—ã–≤–∞—Ç—å",
        "deserve": "–∑–∞—Å–ª—É–∂–∏–≤–∞—Ç—å",
        "destroy": "—É–Ω–∏—á—Ç–æ–∂–∞—Ç—å",
        "develop": "—Ä–∞–∑–≤–∏–≤–∞—Ç—å",
        "disagree": "–Ω–µ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è",
        "discover": "–æ—Ç–∫—Ä—ã–≤–∞—Ç—å",
        "divide": "–¥–µ–ª–∏—Ç—å",
        "doubt": "—Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è",
        "earn": "–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å",
        "educate": "–æ–±—É—á–∞—Ç—å",
        "encourage": "–ø–æ–æ—â—Ä—è—Ç—å",
        "enjoy": "–Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è",
        "escape": "—Å–±–µ–≥–∞—Ç—å",
        "examine": "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å",
        "exchange": "–æ–±–º–µ–Ω–∏–≤–∞—Ç—å",
        "exist": "—Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å",
        "expand": "—Ä–∞—Å—à–∏—Ä—è—Ç—å",
        "expect": "–æ–∂–∏–¥–∞—Ç—å",
        "experience": "–æ–ø—ã—Ç",
        "express": "–≤—ã—Ä–∞–∂–∞—Ç—å",
        "fail": "—Ç–µ—Ä–ø–µ—Ç—å –Ω–µ—É–¥–∞—á—É",
        "fear": "–±–æ—è—Ç—å—Å—è",
        "feed": "–∫–æ—Ä–º–∏—Ç—å",
        "feel": "—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å",
        "fight": "–±–æ—Ä–æ—Ç—å—Å—è",
        "fill": "–∑–∞–ø–æ–ª–Ω—è—Ç—å",
        "find": "–Ω–∞—Ö–æ–¥–∏—Ç—å",
        "fix": "—á–∏–Ω–∏—Ç—å",
        "follow": "—Å–ª–µ–¥–æ–≤–∞—Ç—å",
        "force": "–∑–∞—Å—Ç–∞–≤–ª—è—Ç—å",
        "forget": "–∑–∞–±—ã–≤–∞—Ç—å",
        "freeze": "–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—Ç—å",
        "frighten": "–ø—É–≥–∞—Ç—å",
        "gather": "—Å–æ–±–∏—Ä–∞—Ç—å",
        "glow": "—Å–≤–µ—Ç–∏—Ç—å—Å—è",
        "greet": "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
        "grow": "—Ä–∞—Å—Ç–∏",
        "guess": "—É–≥–∞–¥—ã–≤–∞—Ç—å",
        "guide": "–≤–µ—Å—Ç–∏",
        "hang": "–≤–µ—à–∞—Ç—å",
        "happen": "—Å–ª—É—á–∞—Ç—å—Å—è",
        "harm": "–≤—Ä–µ–¥–∏—Ç—å",
        "hate": "–Ω–µ–Ω–∞–≤–∏–¥–µ—Ç—å",
        "heal": "–ª–µ—á–∏—Ç—å",
        "hear": "—Å–ª—ã—à–∞—Ç—å",
        "heat": "–Ω–∞–≥—Ä–µ–≤–∞—Ç—å",
        "help": "–ø–æ–º–æ–≥–∞—Ç—å",
        "hide": "–ø—Ä—è—Ç–∞—Ç—å",
        "hit": "—É–¥–∞—Ä—è—Ç—å",
        "hope": "–Ω–∞–¥–µ—è—Ç—å—Å—è",
        "hunt": "–æ—Ö–æ—Ç–∏—Ç—å—Å—è",
        "imagine": "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å",
        "increase": "—É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å",
        "influence": "–≤–ª–∏—è—Ç—å",
        "inform": "—Å–æ–æ–±—â–∞—Ç—å",
        "injure": "—Ä–∞–Ω–∏—Ç—å",
        "insist": "–Ω–∞—Å—Ç–∞–∏–≤–∞—Ç—å",
        "introduce": "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å (–∫–æ–≥–æ-—Ç–æ)",
        "invent": "–∏–∑–æ–±—Ä–µ—Ç–∞—Ç—å",
        "join": "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è",
        "jump": "–ø—Ä—ã–≥–∞—Ç—å",
        "keep": "—Ö—Ä–∞–Ω–∏—Ç—å",
        "kick": "–ø–∏–Ω–∞—Ç—å",
        "kill": "—É–±–∏–≤–∞—Ç—å",
        "knock": "—Å—Ç—É—á–∞—Ç—å",
        "know": "–∑–Ω–∞—Ç—å",
        "lack": "–Ω–µ–¥–æ—Å—Ç–∞–≤–∞—Ç—å",
        "last": "–¥–ª–∏—Ç—å—Å—è",
        "lead": "–≤–µ—Å—Ç–∏",
        "learn": "—É—á–∏—Ç—å",
        "leave": "–æ—Å—Ç–∞–≤–ª—è—Ç—å",
        "lend": "–æ–¥–∞–ª–∂–∏–≤–∞—Ç—å",
        "lie": "–ª–≥–∞—Ç—å",
        "lift": "–ø–æ–¥–Ω–∏–º–∞—Ç—å",
        "light": "–æ—Å–≤–µ—â–∞—Ç—å",
        "listen": "—Å–ª—É—à–∞—Ç—å",
        "live": "–∂–∏—Ç—å",
        "look": "—Å–º–æ—Ç—Ä–µ—Ç—å",
        "lose": "—Ç–µ—Ä—è—Ç—å",
        "love": "–ª—é–±–∏—Ç—å",
        "maintain": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å",
        "make": "–¥–µ–ª–∞—Ç—å",
        "matter": "–∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ",
        "mean": "–∑–Ω–∞—á–∏—Ç—å",
        "measure": "–∏–∑–º–µ—Ä—è—Ç—å",
        "meet": "–≤—Å—Ç—Ä–µ—á–∞—Ç—å",
        "melt": "—Ç–∞—è—Ç—å",
        "move": "–¥–≤–∏–≥–∞—Ç—å—Å—è",
        "need": "–Ω—É–∂–¥–∞—Ç—å—Å—è",
        "notice": "–∑–∞–º–µ—á–∞—Ç—å",
        "obey": "–ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è",
        "observe": "–Ω–∞–±–ª—é–¥–∞—Ç—å",
        "obtain": "–ø–æ–ª—É—á–∞—Ç—å",
        "occupy": "–∑–∞–Ω–∏–º–∞—Ç—å",
        "occur": "–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å",
        "open": "–æ—Ç–∫—Ä—ã–≤–∞—Ç—å",
        "order": "–∑–∞–∫–∞–∑—ã–≤–∞—Ç—å",
        "organize": "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å",
        "owe": "–±—ã—Ç—å –¥–æ–ª–∂–Ω—ã–º",
        "own": "–≤–ª–∞–¥–µ—Ç—å",
        "pack": "—É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å",
        "paint": "–∫—Ä–∞—Å–∏—Ç—å",
        "pass": "–ø—Ä–æ—Ö–æ–¥–∏—Ç—å",
        "pay": "–ø–ª–∞—Ç–∏—Ç—å",
        "perform": "–≤—ã–ø–æ–ª–Ω—è—Ç—å",
        "pick": "–≤—ã–±–∏—Ä–∞—Ç—å",
        "place": "–ø–æ–º–µ—â–∞—Ç—å",
        "plan": "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
        "play": "–∏–≥—Ä–∞—Ç—å",
        "please": "—Ä–∞–¥–æ–≤–∞—Ç—å",
        "point": "—É–∫–∞–∑—ã–≤–∞—Ç—å",
        "possess": "–æ–±–ª–∞–¥–∞—Ç—å",
        "practice": "–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è",
        "praise": "—Ö–≤–∞–ª–∏—Ç—å",
        "prefer": "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å",
        "press": "–Ω–∞–∂–∏–º–∞—Ç—å",
        "prevent": "–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å",
        "produce": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å",
        "protect": "–∑–∞—â–∏—â–∞—Ç—å",
        "prove": "–¥–æ–∫–∞–∑—ã–≤–∞—Ç—å",
        "provide": "–æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å",
        "pull": "—Ç—è–Ω—É—Ç—å",
        "punish": "–Ω–∞–∫–∞–∑—ã–≤–∞—Ç—å",
        "push": "—Ç–æ–ª–∫–∞—Ç—å",
        "put": "–∫–ª–∞—Å—Ç—å",
        "question": "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å",
        "raise": "–ø–æ–¥–Ω–∏–º–∞—Ç—å",
        "reach": "–¥–æ—Å—Ç–∏–≥–∞—Ç—å",
        "read": "—á–∏—Ç–∞—Ç—å",
        "realize": "–æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å",
        "receive": "–ø–æ–ª—É—á–∞—Ç—å",
        "recognize": "—É–∑–Ω–∞–≤–∞—Ç—å",
        "record": "–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å",
        "reduce": "—É–º–µ–Ω—å—à–∞—Ç—å",
        "refer": "—Å—Å—ã–ª–∞—Ç—å—Å—è",
        "reflect": "–æ—Ç—Ä–∞–∂–∞—Ç—å",
        "refuse": "–æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è",
        "regret": "—Å–æ–∂–∞–ª–µ—Ç—å",
        "reject": "–æ—Ç–≤–µ—Ä–≥–∞—Ç—å",
        "relax": "—Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è",
        "remember": "–ø–æ–º–Ω–∏—Ç—å",
        "remove": "—É–¥–∞–ª—è—Ç—å",
        "repair": "—á–∏–Ω–∏—Ç—å",
        "repeat": "–ø–æ–≤—Ç–æ—Ä—è—Ç—å",
        "replace": "–∑–∞–º–µ–Ω—è—Ç—å",
        "reply": "–æ—Ç–≤–µ—á–∞—Ç—å",
        "report": "—Å–æ–æ–±—â–∞—Ç—å",
        "represent": "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å",
        "require": "—Ç—Ä–µ–±–æ–≤–∞—Ç—å",
        "rescue": "—Å–ø–∞—Å–∞—Ç—å",
        "research": "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å",
        "respect": "—É–≤–∞–∂–∞—Ç—å",
        "rest": "–æ—Ç–¥—ã—Ö–∞—Ç—å",
        "result": "—Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "return": "–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å",
        "reveal": "—Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å",
        "review": "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å",
        "reward": "–Ω–∞–≥—Ä–∞–∂–¥–∞—Ç—å",
        "ride": "–µ—Ö–∞—Ç—å –≤–µ—Ä—Ö–æ–º",
        "ring": "–∑–≤–æ–Ω–∏—Ç—å",
        "rise": "–ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è",
        "risk": "—Ä–∏—Å–∫–æ–≤–∞—Ç—å",
        "roll": "–∫–∞—Ç–∏—Ç—å—Å—è",
        "rub": "—Ç–µ—Ä–µ—Ç—å",
        "rule": "–ø—Ä–∞–≤–∏—Ç—å",
        "run": "–±–µ–∂–∞—Ç—å",
        "rush": "—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è",
        "save": "—Å–ø–∞—Å–∞—Ç—å",
        "say": "–≥–æ–≤–æ—Ä–∏—Ç—å",
        "search": "–∏—Å–∫–∞—Ç—å",
        "see": "–≤–∏–¥–µ—Ç—å",
        "seem": "–∫–∞–∑–∞—Ç—å—Å—è",
        "sell": "–ø—Ä–æ–¥–∞–≤–∞—Ç—å",
        "send": "–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å",
        "serve": "—Å–ª—É–∂–∏—Ç—å",
        "set": "—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å",
        "settle": "—É–ª–∞–∂–∏–≤–∞—Ç—å",
        "shake": "—Ç—Ä—è—Å—Ç–∏",
        "share": "–¥–µ–ª–∏—Ç—å—Å—è",
        "shout": "–∫—Ä–∏—á–∞—Ç—å",
        "show": "–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å",
        "shut": "–∑–∞–∫—Ä—ã–≤–∞—Ç—å",
        "sing": "–ø–µ—Ç—å",
        "sit": "—Å–∏–¥–µ—Ç—å",
        "sleep": "—Å–ø–∞—Ç—å",
        "smell": "–ø–∞—Ö–Ω—É—Ç—å",
        "solve": "—Ä–µ—à–∞—Ç—å",
        "speak": "–≥–æ–≤–æ—Ä–∏—Ç—å",
        "spend": "—Ç—Ä–∞—Ç–∏—Ç—å",
        "stand": "—Å—Ç–æ—è—Ç—å",
        "start": "–Ω–∞—á–∏–Ω–∞—Ç—å",
        "stay": "–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è",
        "steal": "–≤–æ—Ä–æ–≤–∞—Ç—å",
        "stick": "–ø—Ä–∏–∫–ª–µ–∏–≤–∞—Ç—å",
        "stop": "–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å",
        "study": "—É—á–∏—Ç—å—Å—è",
        "succeed": "–ø—Ä–µ—É—Å–ø–µ–≤–∞—Ç—å",
        "suffer": "—Å—Ç—Ä–∞–¥–∞—Ç—å",
        "suggest": "–ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å",
        "supply": "–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å",
        "suppose": "–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—Ç—å",
        "surround": "–æ–∫—Ä—É–∂–∞—Ç—å",
        "survive": "–≤—ã–∂–∏–≤–∞—Ç—å",
        "suspect": "–ø–æ–¥–æ–∑—Ä–µ–≤–∞—Ç—å",
        "swim": "–ø–ª–∞–≤–∞—Ç—å",
        "take": "–±—Ä–∞—Ç—å",
        "talk": "—Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å",
        "taste": "–ø—Ä–æ–±–æ–≤–∞—Ç—å",
        "teach": "—É—á–∏—Ç—å",
        "tear": "—Ä–≤–∞—Ç—å",
        "tell": "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å",
        "tend": "–∏–º–µ—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é",
        "test": "–ø—Ä–æ–≤–µ—Ä—è—Ç—å",
        "thank": "–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å",
        "think": "–¥—É–º–∞—Ç—å",
        "throw": "–±—Ä–æ—Å–∞—Ç—å",
        "touch": "—Ç—Ä–æ–≥–∞—Ç—å",
        "train": "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å",
        "travel": "–ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å",
        "treat": "–æ–±—Ä–∞—â–∞—Ç—å—Å—è",
        "try": "–ø—ã—Ç–∞—Ç—å—Å—è",
        "turn": "–ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å",
        "understand": "–ø–æ–Ω–∏–º–∞—Ç—å",
        "use": "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        "visit": "–ø–æ—Å–µ—â–∞—Ç—å",
        "wait": "–∂–¥–∞—Ç—å",
        "walk": "—Ö–æ–¥–∏—Ç—å",
        "want": "—Ö–æ—Ç–µ—Ç—å",
        "warn": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å",
        "wash": "–º—ã—Ç—å",
        "watch": "—Å–º–æ—Ç—Ä–µ—Ç—å",
        "wear": "–Ω–æ—Å–∏—Ç—å",
        "win": "–ø–æ–±–µ–∂–¥–∞—Ç—å",
        "wish": "–∂–µ–ª–∞—Ç—å",
        "work": "—Ä–∞–±–æ—Ç–∞—Ç—å",
        "worry": "–±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è",
        "write": "–ø–∏—Å–∞—Ç—å",
        "aisle": "–ø—Ä–æ—Ö–æ–¥",
        "bargain": "–≤—ã–≥–æ–¥–Ω–∞—è –ø–æ–∫—É–ø–∫–∞",
        "complimentary":
        "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π (–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π)",
        "delivery": "–¥–æ—Å—Ç–∞–≤–∫–∞",
        "expiry": "—Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏",
        "fragile": "—Ö—Ä—É–ø–∫–∏–π",
        "gadget": "–≥–∞–¥–∂–µ—Ç",
        "handy": "—É–¥–æ–±–Ω—ã–π",
        "inventory": "–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
        "junk": "—Ö–ª–∞–º",
        "knickknack": "–±–µ–∑–¥–µ–ª—É—à–∫–∞",
        "landmark": "–æ—Ä–∏–µ–Ω—Ç–∏—Ä",
        "malfunction": "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å",
        "novelty": "–Ω–æ–≤–∏–Ω–∫–∞",
        "outlet": "—Ä–æ–∑–µ—Ç–∫–∞/–∞—É—Ç–ª–µ—Ç",
        "package": "–ø–∞–∫–µ—Ç/–ø–æ—Å—ã–ª–∫–∞",
        "quirky": "–Ω–µ–æ–±—ã—á–Ω—ã–π",
        "receipt": "—á–µ–∫",
        "souvenir": "—Å—É–≤–µ–Ω–∏—Ä",
        "tag": "—Ü–µ–Ω–Ω–∏–∫/–±–∏—Ä–∫–∞",
        "upgrade": "—É–ª—É—á—à–µ–Ω–∏–µ",
        "voucher": "—Ç–∞–ª–æ–Ω",
        "warranty": "–≥–∞—Ä–∞–Ω—Ç–∏—è",
        "aisle seat": "–º–µ—Å—Ç–æ —É –ø—Ä–æ—Ö–æ–¥–∞",
        "bellhop": "–Ω–æ—Å–∏–ª—å—â–∏–∫",
        "concierge": "–∫–æ–Ω—Å—å–µ—Ä–∂",
        "doorman": "—à–≤–µ–π—Ü–∞—Ä",
        "etiquette": "—ç—Ç–∏–∫–µ—Ç",
        "fare": "–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–µ–∑–¥",
        "gratuity": "—á–∞–µ–≤—ã–µ",
        "hostel": "—Ö–æ—Å—Ç–µ–ª",
        "itinerary": "–º–∞—Ä—à—Ä—É—Ç",
        "keycard": "–∫–ª—é—á-–∫–∞—Ä—Ç–∞",
        "lodging": "–∂–∏–ª—å–µ",
        "motel": "–º–æ—Ç–µ–ª—å",
        "no-show": "–Ω–µ—è–≤–∫–∞",
        "overnight": "–Ω–æ—á–µ–≤–∫–∞",
        "pit stop": "–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ø—É—Ç–∏",
        "queue": "–æ—á–µ—Ä–µ–¥—å",
        "reservation": "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "stopover": "—Ç—Ä–∞–Ω–∑–∏—Ç",
        "transit": "–ø–µ—Ä–µ—Å–∞–¥–∫–∞",
        "utilities": "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
        "vacancy": "—Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞",
        "walk-in": "–±–µ–∑ –∑–∞–ø–∏—Å–∏",
        "exchange rate": "–∫—É—Ä—Å –æ–±–º–µ–Ω–∞",
        "zip code": "–ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å",
        "rush hour": "—á–∞—Å –ø–∏–∫",
        "awkward": "–Ω–µ–ª–æ–≤–∫–∏–π",
        "banter": "–¥—Ä—É–∂–µ—Å–∫–∏–π –ø–æ–¥—Ç—Ä—É–Ω–∏–≤–∞–Ω–∏–µ",
        "chitchat": "—Å–≤–µ—Ç—Å–∫–∞—è –±–µ—Å–µ–¥–∞",
        "dense": "–Ω–µ–¥–æ–≥–∞–¥–ª–∏–≤—ã–π",
        "egotistical": "—Å–∞–º–æ–≤–ª—é–±–ª–µ–Ω–Ω—ã–π",
        "flaky": "–Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–π",
        "gossip": "—Å–ø–ª–µ—Ç–Ω–∏",
        "humblebrag": "—Å–∫—Ä–æ–º–Ω–æ–µ —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–æ",
        "icebreaker": "—Å–ø–æ—Å–æ–± —Ä–∞–∑—Ä—è–¥–∏—Ç—å –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É",
        "jabber": "–±–æ–ª—Ç–æ–≤–Ω—è",
        "kudos": "–ø–æ—Ö–≤–∞–ª–∞",
        "lousy": "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π",
        "moody": "–ø–µ—Ä–µ–º–µ–Ω—á–∏–≤—ã–π",
        "nosy": "–ª—é–±–æ–ø—ã—Ç–Ω—ã–π",
        "offbeat": "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
        "petty": "–º–µ–ª–æ—á–Ω—ã–π",
        "quirky": "—Å –ø—Ä–∏—á—É–¥–∞–º–∏",
        "rant": "–≥–Ω–µ–≤–Ω–∞—è —Ç–∏—Ä–∞–¥–∞",
        "sassy": "–¥–µ—Ä–∑–∫–∏–π",
        "tactless": "–±–µ—Å—Ç–∞–∫—Ç–Ω—ã–π",
        "uptight": "–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π",
        "vibe": "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
        "whiny": "–Ω—ã—Ç–∏–∫",
        "small talk": "—Å–≤–µ—Ç—Å–∫–∞—è –±–µ—Å–µ–¥–∞",
        "backhanded compliment": "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Å –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–º",
        "blunt": "–ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π",
        "cheesy": "–±–∞–Ω–∞–ª—å–Ω—ã–π",
        "dorky": "—á—É–¥–∞–∫–æ–≤–∞—Ç—ã–π",
        "facepalm": "–∂–µ—Å—Ç —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏—è",
        "geeky": "—É–≤–ª–µ–∫–∞—é—â–∏–π—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏",
        "hang out": "—Ç—É—Å–æ–≤–∞—Ç—å—Å—è",
        "jumpy": "–Ω–µ—Ä–≤–Ω—ã–π",
        "kinky": "—ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ã–π",
        "laid-back": "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π",
        "mellow": "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "nerdy": "–±–æ—Ç–∞–Ω–∏—Å—Ç—ã–π",
        "obnoxious": "–Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π",
        "pushy": "–Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π",
        "quirky": "—Å–≤–æ–µ–æ–±—Ä–∞–∑–Ω—ã–π",
        "rowdy": "—à—É–º–Ω—ã–π",
        "snarky": "—è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π",
        "thrifty": "–±–µ—Ä–µ–∂–ª–∏–≤—ã–π",
        "unplug": "–æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è (–æ—Ç —Ç–µ—Ö–Ω–∏–∫–∏)",
        "vegan": "–≤–µ–≥–∞–Ω",
        "woke": "–ø—Ä–æ—Å–≤–µ—â–µ–Ω–Ω—ã–π",
        "xenial": "–≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º–Ω—ã–π",
        "yappy": "–±–æ–ª—Ç–ª–∏–≤—ã–π",
        "zing": "–∫–æ–ª–∫–æ—Å—Ç—å",
        "airdrop": "–ø–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤",
        "binge-watch": "—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä—è–¥",
        "clickbait": "–∑–∞–º–∞–Ω—É—Ö–∞",
        "deepfake": "—Ñ–µ–π–∫–æ–≤–æ–µ –≤–∏–¥–µ–æ",
        "emoji": "—ç–º–æ–¥–∑–∏",
        "fomo": "—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å",
        "glitch": "—Å–±–æ–π",
        "hashtag": "—Ö—ç—à—Ç–µ–≥",
        "influencer": "–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä",
        "junk mail": "—Å–ø–∞–º",
        "kiosk": "–∫–∏–æ—Å–∫",
        "livestream": "–ø—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è",
        "meme": "–º–µ–º",
        "notifications": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        "on-brand": "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—é",
        "podcast": "–ø–æ–¥–∫–∞—Å—Ç",
        "QR code": "QR-–∫–æ–¥",
        "reboot": "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞",
        "spoiler": "—Å–ø–æ–π–ª–µ—Ä",
        "troll": "—Ç—Ä–æ–ª–ª—å",
        "unfriend": "—É–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π",
        "viral": "–≤–∏—Ä—É—Å–Ω—ã–π",
        "wi-fi": "–≤–∞–π-—Ñ–∞–π",
        "app": "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        "blog": "–±–ª–æ–≥",
        "crowdfund": "–∫—Ä–∞—É–¥—Ñ–∞–Ω–¥–∏–Ω–≥",
        "download": "—Å–∫–∞—á–∏–≤–∞—Ç—å",
        "ebook": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞",
        "firewall": "–±—Ä–∞–Ω–¥–º–∞—É—ç—Ä",
        "gigabyte": "–≥–∏–≥–∞–±–∞–π—Ç",
        "homepage": "–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
        "inbox": "–≤—Ö–æ–¥—è—â–∏–µ",
        "jpeg": "jpeg",
        "keyboard": "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
        "lag": "–∑–∞–¥–µ—Ä–∂–∫–∞",
        "netizen": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
        "offline": "–≤–Ω–µ —Å–µ—Ç–∏",
        "phishing": "—Ñ–∏—à–∏–Ω–≥",
        "spam": "—Å–ø–∞–º",
        "tablet": "–ø–ª–∞–Ω—à–µ—Ç",
        "username": "–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "vlog": "–≤–∏–¥–µ–æ–±–ª–æ–≥",
        "webinar": "–≤–µ–±–∏–Ω–∞—Ä",
        "boarding pass": "–ø–æ—Å–∞–¥–æ—á–Ω—ã–π —Ç–∞–ª–æ–Ω",
        "carry-on": "—Ä—É—á–Ω–∞—è –∫–ª–∞–¥—å",
        "connecting flight": "—Å—Ç—ã–∫–æ–≤–æ—á–Ω—ã–π —Ä–µ–π—Å",
        "departure gate": "–≤—ã—Ö–æ–¥ –Ω–∞ –ø–æ—Å–∞–¥–∫—É",
        "duty-free": "–¥—å—é—Ç–∏-—Ñ—Ä–∏",
        "emergency exit": "–∞–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥",
        "fast track": "—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ö–æ–¥",
        "ground transportation": "–Ω–∞–∑–µ–º–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "hotel shuttle": "–≥–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–π —à–∞—Ç—Ç–ª",
        "immigration": "–∏–º–º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
        "jet bridge": "—Ç–µ–ª–µ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–ø",
        "layover": "–ø–µ—Ä–µ—Å–∞–¥–∫–∞",
        "lost and found": "–±—é—Ä–æ –Ω–∞—Ö–æ–¥–æ–∫",
        "overhead bin": "–±–∞–≥–∞–∂–Ω–∞—è –ø–æ–ª–∫–∞",
        "passport control": "–ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
        "red-eye flight": "–Ω–æ—á–Ω–æ–π —Ä–µ–π—Å",
        "seat assignment": "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç",
        "ticket counter": "—Å—Ç–æ–π–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        "travel adapter": "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –¥–ª—è —Ä–æ–∑–µ—Ç–æ–∫",
        "trolley": "—Ç–µ–ª–µ–∂–∫–∞",
        "turntable": "–±–∞–≥–∞–∂–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å",
        "visa waiver": "–±–µ–∑–≤–∏–∑–æ–≤—ã–π –≤—ä–µ–∑–¥",
        "window seat": "–º–µ—Å—Ç–æ —É –æ–∫–Ω–∞",
        "boarding time": "–≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏",
        "check-in desk": "—Å—Ç–æ–π–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        "delayed flight": "–∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π —Ä–µ–π—Å",
        "exit row": "—Ä—è–¥ —É –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞",
        "flight attendant": "–±–æ—Ä—Ç–ø—Ä–æ–≤–æ–¥–Ω–∏–∫",
        "luggage allowance": "–Ω–æ—Ä–º–∞ –±–∞–≥–∞–∂–∞",
        "priority boarding": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞",
        "appetizer": "–∑–∞–∫—É—Å–∫–∞",
        "buffet": "—à–≤–µ–¥—Å–∫–∏–π —Å—Ç–æ–ª",
        "chef's special": "—Ñ–∏—Ä–º–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ",
        "doggie bag": "–µ–¥–∞ —Å —Å–æ–±–æ–π –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
        "entr√©e": "–æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ",
        "fixed menu": "—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é",
        "gluten-free": "–±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞",
        "happy hour": "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π —á–∞—Å",
        "ingredients": "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
        "junk food": "—Ñ–∞—Å—Ç—Ñ—É–¥",
        "kosher": "–∫–æ—à–µ—Ä–Ω—ã–π",
        "lactose-free": "–±–µ–∑ –ª–∞–∫—Ç–æ–∑—ã",
        "mocktail": "–±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å",
        "nutritious": "–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π",
        "organic": "–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π",
        "portion size": "—Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏",
        "quiche": "–∫–∏—à",
        "reservation": "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "side dish": "–≥–∞—Ä–Ω–∏—Ä",
        "tap water": "–≤–æ–¥–∞ –∏–∑-–ø–æ–¥ –∫—Ä–∞–Ω–∞",
        "utensils": "—Å—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã",
        "vegan option": "–≤–µ–≥–∞–Ω—Å–∫–∞—è –æ–ø—Ü–∏—è",
        "waitlist": "–ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è",
        "√† la carte": "√† la carte (–ø–æ –º–µ–Ω—é)",
        "brunch": "–ø–æ–∑–¥–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫",
        "condiments": "–ø—Ä–∏–ø—Ä–∞–≤—ã",
        "dietary restrictions": "–ø–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
        "food poisoning": "–ø–∏—â–µ–≤–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ",
        "gourmet": "–≥—É—Ä–º–∞–Ω",
        "homemade": "–¥–æ–º–∞—à–Ω–µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è",
        "barcode": "—à—Ç—Ä–∏—Ö-–∫–æ–¥",
        "clearance sale": "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞",
        "discount code": "–∫–æ–¥ —Å–∫–∏–¥–∫–∏",
        "exchange policy": "–ø–æ–ª–∏—Ç–∏–∫–∞ –æ–±–º–µ–Ω–∞",
        "final sale": "–±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞",
        "gift receipt": "–ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —á–µ–∫",
        "in stock": "–≤ –Ω–∞–ª–∏—á–∏–∏",
        "jewelry counter": "–æ—Ç–¥–µ–ª –±–∏–∂—É—Ç–µ—Ä–∏–∏",
        "keep the change": "—Å–¥–∞—á–∏ –Ω–µ –Ω–∞–¥–æ",
        "loyalty card": "–¥–∏—Å–∫–æ–Ω—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞",
        "mail-in rebate": "–≤–æ–∑–≤—Ä–∞—Ç –ø–æ –ø–æ—á—Ç–µ",
        "non-refundable": "–Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π",
        "out of stock": "–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
        "price match": "—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω",
        "quality guarantee": "–≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞",
        "return policy": "–ø–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞",
        "shopping spree": "—à–æ–ø–∏–Ω–≥-–º–∞—Ä–∞—Ñ–æ–Ω",
        "try on": "–ø—Ä–∏–º–µ—Ä—è—Ç—å",
        "unworn": "–Ω–µ –Ω–æ—à–µ–Ω–Ω—ã–π",
        "value pack": "–≤—ã–≥–æ–¥–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞",
        "warranty card": "–≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ç–∞–ª–æ–Ω",
        "exchange desk": "—Å—Ç–æ–π–∫–∞ –æ–±–º–µ–Ω–∞",
        "fitting room": "–ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è",
        "gift wrapping": "–ø–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞",
        "impulse buy": "—Å–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞",


        "last season": "–ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω",
        "must-have": "–Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –≤–µ—â—å",
        "on clearance": "–Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ",
        "price tag": "—Ü–µ–Ω–Ω–∏–∫",
        "shopping cart": "—Ç–µ–ª–µ–∂–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫",
        "autocorrect": "–∞–≤—Ç–æ–∑–∞–º–µ–Ω–∞",
        "browser": "–±—Ä–∞—É–∑–µ—Ä",
        "cache": "–∫—ç—à",
        "data plan": "—Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω",
        "emoji keyboard": "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —ç–º–æ–¥–∑–∏",
        "firewall": "–±—Ä–∞–Ω–¥–º–∞—É—ç—Ä",
        "google it": "–ø–æ–≥—É–≥–ª–∏",
        "hack": "–≤–∑–ª–æ–º",
        "in-app purchase": "–≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
        "jailbreak": "–≤–∑–ª–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        "keychain": "—Å–≤—è–∑–∫–∞ –∫–ª—é—á–µ–π (–ø–∞—Ä–æ–ª–µ–π)",
        "laggy": "—Ç–æ—Ä–º–æ–∑—è—â–∏–π",
        "mute": "–æ—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫",
        "notifications": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        "offline mode": "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º",
        "pop-up": "–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ",
        "QR scanner": "QR-—Å–∫–∞–Ω–µ—Ä",
        "refresh": "–æ–±–Ω–æ–≤–∏—Ç—å",
        "screenshot": "—Å–∫—Ä–∏–Ω—à–æ—Ç",
        "touchscreen": "—Å–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω",
        "unsubscribe": "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        "viral content": "–≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        "wireless charger": "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞",
        "airplane mode": "–∞–≤–∏–∞—Ä–µ–∂–∏–º",
        "bug fix": "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏",
        "cloud storage": "–æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
        "dark mode": "—Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º",
        "e-receipt": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫",
        "facial recognition": "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞",
        "geotag": "–≥–µ–æ—Ç–µ–≥",
        "blackout": "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞",
        "carpool": "—Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞",
        "deadline": "–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫",
        "emergency contact": "–∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤",
        "flat tire": "—Å–ø—É—â–µ–Ω–Ω–æ–µ –∫–æ–ª–µ—Å–æ",
        "gas station": "–∑–∞–ø—Ä–∞–≤–∫–∞",
        "handyman": "–º–∞—Å—Ç–µ—Ä –Ω–∞ –≤—Å–µ —Ä—É–∫–∏",
        "insurance claim": "—Å—Ç—Ä–∞—Ö–æ–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ",
        "jump start": "–ø—Ä–∏–∫—É—Ä–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
        "keysmith": "–º–∞—Å—Ç–µ—Ä –ø–æ –∫–ª—é—á–∞–º",
        "leak": "–ø—Ä–æ—Ç–µ—á–∫–∞",
        "maintenance": "—Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        "no parking zone": "–º–µ—Å—Ç–æ –≥–¥–µ –ø–∞—Ä–∫–æ–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞",
        "on hold": "–Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏",
        "paperwork": "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
        "quick fix": "–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "roadside assistance": "–ø–æ–º–æ—â—å –Ω–∞ –¥–æ—Ä–æ–≥–µ",
        "service charge": "–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        "traffic jam": "–ø—Ä–æ–±–∫–∞",
        "utilities": "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
        "vandalism": "–≤–∞–Ω–¥–∞–ª–∏–∑–º",
        "water damage": "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –≤–æ–¥—ã",
        "xerox copy": "–∫—Å–µ—Ä–æ–∫–æ–ø–∏—è",
        "yard sale": "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –≤–æ –¥–≤–æ—Ä–µ",
        "zip tie": "–ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —Å—Ç—è–∂–∫–∞",
        "after hours": "–≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
        "break-in": "–≤–∑–ª–æ–º",
        "customer service": "–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "dress code": "–¥—Ä–µ—Å—Å-–∫–æ–¥",
        "electrician": "—ç–ª–µ–∫—Ç—Ä–∏–∫"
    }

    cursor.execute("SELECT COUNT(*) FROM words")
    if cursor.fetchone()[0] == 0:
        for eng, rus in english_words.items():
            cursor.execute("INSERT OR IGNORE INTO words (english, russian) VALUES (?, ?)", (eng, rus))

    conn.commit()
    return conn



conn = init_db()
cursor = conn.cursor()


user_tests = {}
user_vocabulary = {}
user_words_pagination = {}

command_router = Router()


def get_word_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_word"),
         InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_word")],
        [InlineKeyboardButton(text="üìö –ú–æ–∏ —Å–ª–æ–≤–∞", callback_data="my_words_1"),  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ my_words_1
         InlineKeyboardButton(text="üìù –¢–µ—Å—Ç", callback_data="start_test")]
    ])


async def get_random_word(user_id: int):

    cursor.execute('''
    SELECT word_id FROM user_words WHERE user_id = ?
    ''', (user_id,))
    used_word_ids = [row[0] for row in cursor.fetchall()]


    if used_word_ids:
        cursor.execute(f'''
        SELECT id, english, russian FROM words 
        WHERE id NOT IN ({','.join(['?'] * len(used_word_ids))}) 
        ORDER BY RANDOM() LIMIT 1
        ''', used_word_ids)
    else:
        cursor.execute('''
        SELECT id, english, russian FROM words 
        ORDER BY RANDOM() LIMIT 1
        ''')

    word_data = cursor.fetchone()

    if not word_data:

        cursor.execute('''
        SELECT id, english, russian FROM words 
        ORDER BY RANDOM() LIMIT 1
        ''')
        word_data = cursor.fetchone()

    if word_data:
        word_id, word, translation = word_data
        user_vocabulary[user_id] = (word_id, word, translation)
        return word, translation
    return None, None


@command_router.message(Command('words'))
async def send_random_word(message: types.Message):
    user_id = message.chat.id
    word, translation = await get_random_word(user_id)

    if word and translation:
        await message.answer(
            text=f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ:\n\nüî§ {word}\nüá∑üá∫ {translation}",
            reply_markup=get_word_keyboard()
        )
    else:
        await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@command_router.callback_query(F.data == "add_word")
async def handle_add_word(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if user_id in user_vocabulary:
        word_id, word, translation = user_vocabulary[user_id]

        try:

            cursor.execute('''
            INSERT OR IGNORE INTO user_words (user_id, word_id) 
            VALUES (?, ?)
            ''', (user_id, word_id))


            cursor.execute('''
            INSERT OR IGNORE INTO user_progress (user_id, added, skipped) 
            VALUES (?, 0, 0)
            ''', (user_id,))

            cursor.execute('''
            UPDATE user_progress 
            SET added = added + 1 
            WHERE user_id = ?
            ''', (user_id,))

            conn.commit()


            await callback.message.delete()
            await callback.answer("‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å!")


            await send_random_word(callback.message)
        except Exception as e:
            logging.error(f"Error adding word: {e}")
            await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞")
    else:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@command_router.callback_query(F.data == "skip_word")
async def handle_skip_word(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    try:

        cursor.execute('''
        INSERT OR IGNORE INTO user_progress (user_id, added, skipped) 
        VALUES (?, 0, 0)
        ''', (user_id,))

        cursor.execute('''
        UPDATE user_progress 
        SET skipped = skipped + 1 
        WHERE user_id = ?
        ''', (user_id,))

        conn.commit()

        await callback.answer("‚è≠ –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        await send_random_word(callback.message)
    except Exception as e:
        logging.error(f"Error skipping word: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Å–ª–æ–≤–∞")


def get_mywords_keyboard(user_id: int, page: int = 1):

    cursor.execute('''
    SELECT COUNT(*) FROM user_words WHERE user_id = ?
    ''', (user_id,))
    total_words = cursor.fetchone()[0]

    buttons = []


    if total_words > 20:
        total_pages = (total_words + 19) // 20


        buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞", callback_data="delete_all_words")])


        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_words_{page - 1}"))
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"my_words_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)


    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@command_router.callback_query(F.data.startswith("my_words_"))
async def handle_my_words_pagination(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    page = int(callback.data.split("_")[-1])

    try:

        offset = (page - 1) * 20
        cursor.execute('''
        SELECT w.english, w.russian 
        FROM user_words uw
        JOIN words w ON uw.word_id = w.id
        WHERE uw.user_id = ?
        ORDER BY w.english
        LIMIT 20 OFFSET ?
        ''', (user_id, offset))
        user_words = cursor.fetchall()


        cursor.execute('''
        SELECT added, skipped, correct, wrong 
        FROM user_progress 
        WHERE user_id = ?
        ''', (user_id,))
        progress = cursor.fetchone()

        if user_words:
            words_list = "\n".join([f"üî§ {word} - üá∑üá∫ {trans}" for word, trans in user_words])


            cursor.execute('''
            SELECT COUNT(*) FROM user_words WHERE user_id = ?
            ''', (user_id,))
            total_words = cursor.fetchone()[0]

            page_info = f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {(total_words + 19) // 20}" if total_words > 20 else ""

            if progress:
                stats = f"\n\nüìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {progress[0]}\n‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {progress[1]}"
                if progress[2] or progress[3]:
                    stats += f"\nüìù –¢–µ—Å—Ç—ã:\n‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {progress[2]}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {progress[3]}"
            else:
                stats = "\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                text=f"üìö –í–∞—à–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ ({total_words}):\n\n{words_list}{page_info}{stats}",
                reply_markup=get_mywords_keyboard(user_id, page)
            )
        else:
            await callback.message.edit_text(
                text="üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –ù–∞–∂–º–∏—Ç–µ '‚úÖ –î–æ–±–∞–≤–∏—Ç—å', —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞.",
                reply_markup=get_word_keyboard()
            )
    except Exception as e:
        logging.error(f"Error getting user words: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Å–ª–æ–≤")

    await callback.answer()


@command_router.callback_query(F.data == "delete_all_words")
async def handle_delete_all_words(callback: types.CallbackQuery):
    user_id = callback.from_user.id


    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_all")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"my_words_1")]
    ])

    await callback.message.edit_text(
        text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–ª–æ–≤–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_keyboard
    )
    await callback.answer()


@command_router.callback_query(F.data == "confirm_delete_all")
async def handle_confirm_delete_all(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    try:

        cursor.execute('''
        DELETE FROM user_words WHERE user_id = ?
        ''', (user_id,))


        cursor.execute('''
        UPDATE user_progress 
        SET added = 0 
        WHERE user_id = ?
        ''', (user_id,))

        conn.commit()

        await callback.message.edit_text(
            text="üóë –í—Å–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è!",
            reply_markup=get_word_keyboard()
        )
    except Exception as e:
        logging.error(f"Error deleting all words: {e}")
        await callback.message.edit_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤",
            reply_markup=get_word_keyboard()
        )

    await callback.answer()


@command_router.message(Command('mywords'))
async def handle_mywords_command(message: types.Message):
    user_id = message.from_user.id

    try:

        await handle_my_words_pagination(types.CallbackQuery(
            message=message,
            data="my_words_1",
            from_user=message.from_user
        ))
    except Exception as e:
        logging.error(f"Error getting user words: {e}")
        await message.answer("–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç–µ. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ /words")


def get_test_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑", callback_data="more_test")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_menu")]
    ])


async def generate_test(user_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤"""
    try:
        cursor.execute('''
        SELECT COUNT(*) FROM user_words WHERE user_id = ?
        ''', (user_id,))
        if cursor.fetchone()[0] < 4:
            return None, None, None


        cursor.execute('''
        SELECT w.id, w.english, w.russian 
        FROM user_words uw
        JOIN words w ON uw.word_id = w.id
        WHERE uw.user_id = ?
        ORDER BY RANDOM() 
        LIMIT 1
        ''', (user_id,))
        test_word_data = cursor.fetchone()

        if not test_word_data:
            return None, None, None

        word_id, test_word, correct_answer = test_word_data


        cursor.execute('''
        SELECT w.russian 
        FROM user_words uw
        JOIN words w ON uw.word_id = w.id
        WHERE uw.user_id = ? AND w.russian != ?
        ORDER BY RANDOM() 
        LIMIT 3
        ''', (user_id, correct_answer))
        wrong_answers = [row[0] for row in cursor.fetchall()]


        while len(wrong_answers) < 3:
            cursor.execute('''
            SELECT russian FROM words 
            WHERE russian != ? 
            ORDER BY RANDOM() 
            LIMIT 1
            ''', (correct_answer,))
            word = cursor.fetchone()
            if word and word[0] not in wrong_answers:
                wrong_answers.append(word[0])


        all_answers = [correct_answer] + wrong_answers
        random.shuffle(all_answers)


        user_tests[user_id] = {
            "word": test_word,
            "correct": correct_answer,
            "answers": all_answers
        }

        return test_word, all_answers, all_answers.index(correct_answer)
    except Exception as e:
        logging.error(f"Error generating test: {e}")
        return None, None, None


@command_router.callback_query(F.data == "start_test")
async def handle_start_test(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    try:

        cursor.execute('''
        SELECT COUNT(*) FROM user_words WHERE user_id = ?
        ''', (user_id,))
        if cursor.fetchone()[0] < 4:
            await callback.answer(
                "üìù –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 —Å–ª–æ–≤–∞!",
                show_alert=True
            )
            return

        test_word, answers, _ = await generate_test(user_id)

        if not test_word or not answers:
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=answers[0], callback_data="test_answer_0")],
            [InlineKeyboardButton(text=answers[1], callback_data="test_answer_1")],
            [InlineKeyboardButton(text=answers[2], callback_data="test_answer_2")],
            [InlineKeyboardButton(text=answers[3], callback_data="test_answer_3")],
        ])

        await callback.message.edit_text(
            text=f"üìù –¢–µ—Å—Ç: –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{test_word}'?",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"Error starting test: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞")

    await callback.answer()


@command_router.message(Command('test'))
async def handle_test(message: types.Message):
    user_id = message.from_user.id

    try:

        cursor.execute('''
        SELECT COUNT(*) FROM user_words WHERE user_id = ?
        ''', (user_id,))
        if cursor.fetchone()[0] < 4:
            await message.answer(
                "üìù –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 —Å–ª–æ–≤–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /words, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!"
            )
            return

        test_word, answers, _ = await generate_test(user_id)

        if not test_word or not answers:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=answers[0], callback_data="test_answer_0")],
            [InlineKeyboardButton(text=answers[1], callback_data="test_answer_1")],
            [InlineKeyboardButton(text=answers[2], callback_data="test_answer_2")],
            [InlineKeyboardButton(text=answers[3], callback_data="test_answer_3")],
        ])

        await message.answer(
            text=f"üìù –¢–µ—Å—Ç: –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{test_word}'?",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"Error starting test: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞")


@command_router.callback_query(F.data.startswith("test_answer_"))
async def handle_test_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    answer_index = int(callback.data.split("_")[-1])

    if user_id not in user_tests:
        await callback.answer("‚ùå –¢–µ—Å—Ç —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π.")
        return

    test_data = user_tests[user_id]

    try:
        if test_data["answers"][answer_index] == test_data["correct"]:
            response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"

            cursor.execute('''
            UPDATE user_progress 
            SET correct = correct + 1 
            WHERE user_id = ?
            ''', (user_id,))
        else:
            response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{test_data['correct']}'"

            cursor.execute('''
            UPDATE user_progress 
            SET wrong = wrong + 1 
            WHERE user_id = ?
            ''', (user_id,))

        conn.commit()

        await callback.message.edit_text(
            text=f"{response}\n\n–°–ª–æ–≤–æ: {test_data['word']}\n–ü–µ—Ä–µ–≤–æ–¥: {test_data['correct']}",
            reply_markup=get_test_keyboard()
        )
    except Exception as e:
        logging.error(f"Error processing test answer: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")

    await callback.answer()


@command_router.callback_query(F.data == "more_test")
async def handle_more_test(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    try:

        cursor.execute('''
        SELECT COUNT(*) FROM user_words WHERE user_id = ?
        ''', (user_id,))
        if cursor.fetchone()[0] < 4:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤!")
            return

        test_word, answers, _ = await generate_test(user_id)

        if not test_word or not answers:
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=answers[0], callback_data="test_answer_0")],
            [InlineKeyboardButton(text=answers[1], callback_data="test_answer_1")],
            [InlineKeyboardButton(text=answers[2], callback_data="test_answer_2")],
            [InlineKeyboardButton(text=answers[3], callback_data="test_answer_3")],
        ])

        await callback.message.edit_text(
            text=f"üìù –¢–µ—Å—Ç: –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{test_word}'?",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"Error generating more test: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞")

    await callback.answer()


@command_router.callback_query(F.data == "to_menu")
async def handle_to_menu(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            text="üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_word_keyboard()
        )
    except Exception as e:
        logging.error(f"Error returning to menu: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")

    await callback.answer()


def close_db():
    conn.close()


@command_router.message(Command('help'))
async def handle_help(message: types.Message):
    help_message = (
        "üîπ/about ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n"
        '\n'
        "ü•∫–û–±—É—á–µ–Ω–∏–µü•∫:\n"
        '\n'
        "–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ ( –ø–µ—Ä–µ–≤–æ–¥ ), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.\n"
        '\n'
        "üìñ /words ‚Äì –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–Ω—è.\n"
        '\n'
        "üìö /mywords ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–∏–∫–µ.\n"
        '\n'
        "üìù /test ‚Äì –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤.\n"
        '\n'
        "üéØ /topics ‚Äì –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É (–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –±–∏–∑–Ω–µ—Å –∏ –¥—Ä.)\n"
    )
    await message.answer(text=help_message)


@command_router.message(Command('start'))
async def handle_start(message: types.Message):
    start_message = ("üåü <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SpeakUp Bot! </i>üåü\n\n"
                     "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
                     "üìö –°–æ –º–Ω–æ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
                     "‚Ä¢ –ü–æ–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å\n"
                     "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö\n"
                     "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
                     "üí° –í—Å–µ –º–æ–∏ —É—Å–ª—É–≥–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ <i>–ë–ï–°–ü–õ–ê–¢–ù–´</i>!\n\n"
                     "üõ† <i>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</i>\n"
                     "üîπ /help - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
                     "üîπ /about - –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö\n"
                     "üîπ /words - –Ω–∞—á–∞—Ç—å —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
                     "üéâ –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –≤–º–µ—Å—Ç–µ!")
    await message.answer(text=start_message, parse_mode='HTML')


@command_router.message(Command('about'))
async def handle_about(message: types.Message):
    about_message = (
        "SpeakUp Bot ‚Äì —ç—Ç–æ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –ª–µ–≥–∫–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!\n"
        '\n'
        "‚ú® –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?\n"
        '\n'
        "1.üìö –£—á–∏—Ç –Ω–æ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏\n"
        "2.üîÑ –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "3.üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—É—á–µ–Ω–∏–∏\n"
        '\n'
        "üìå –ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è:\n"
        '\n'
        "1.‚úîÔ∏è –ú–∏–Ω–∏-—É—Ä–æ–∫–∏ –ø–æ 5-10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
        "2.‚úîÔ∏è –ò–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç\n"
        '\n'
        "‚ù§Ô∏è –ù–∞—à–∞ —Ü–µ–ª—å ‚Äì —Å–¥–µ–ª–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–µ–∫—Å–∏–∫–∏ –ø—Ä–æ—Å—Ç—ã–º –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º!‚ù§Ô∏è\n"
        '\n'
        "–í–µ—Ä—Å–∏—è 1.0 | –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É –≤–∞—Å –≤—ã–ª–µ–∑–∞–µ—Ç –æ—à–∏–±–∫–∞, –ø–∏—Å–∞—Ç—å @Installer_editor36\n"
        '\n'
        '–ù–ê–ñ–ú–ò (/words) –ß–¢–û–ë–´ –ù–ê–ß–ê–¢–¨ –£–ß–ò–¢–¨ –ê–ù–ì–õ–ò–ô–°–ö–ò–ô\n'
        '\n'
        "–ù–∞–∂–º–∏ /help, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ –µ—Å—Ç—å —É –º–µ–Ω—è –∫–æ–º–∞–Ω–¥—ã"
    )
    await message.answer(text=about_message)


@command_router.message(F.sticker)
async def handle_sticker(message: types.Message):
    await message.answer(text='üòé OMG!! It is so good sticker! üòé')


TRIGGER_WORDS = ["–ø—Ä–∏–≤–µ—Ç", "hi", "hello", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é"]


@command_router.message(lambda message: message.text.lower() in TRIGGER_WORDS)
async def say_hi(message: types.Message):
    await message.answer(text="ü§ó Hi! How are you? ^,^")


g = ['–ø–æ–∫–∞', "bye", "goodbye"]


@command_router.message(lambda message: message.text.lower() in g)
async def reply_goodbye(message: types.Message):
    await message.answer(text="ü•∫ See you! Have a nice day, Bro :)")


@command_router.message(F.text.lower().contains('thank you'))
async def reply_thanks(message: types.Message):
    await message.answer(text="ü•∞ You are welcome! ü•∞")


@command_router.message(Command('topics'))
async def handle_topics(message: types.Message):
    await message.answer(text="–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


@command_router.message(F.text.lower().contains("–ø–µ—Ä–µ–≤–æ–¥"))
async def reply_goodbye(message: types.Message):
    await message.answer(text="Translate", reply_markup=funny_keyboard)


@command_router.message(Command('english'))
async def send_photo(message: types.Message):
    await message.answer_photo(
        photo='https://i.postimg.cc/X7CT7Gbj/Lucid-Realism-Create-an-illustration-featuring-the-Union-Jack-1.jpg',
        caption='‚ù§Ô∏è–£—á–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–º–µ—Å—Ç–µ‚ù§Ô∏è!',
    )



